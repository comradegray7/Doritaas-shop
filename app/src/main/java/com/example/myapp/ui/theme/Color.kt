package com.example.myapp.ui.theme

import androidx.compose.runtime.Composable
import androidx.compose.runtime.Immutable
import androidx.compose.runtime.ReadOnlyComposable
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.ui.graphics.Color
import androidx.compose.material3.MaterialTheme

//The colors have been generated by Material Theme Builder at https://material-foundation.github.io/material-theme-builder/
// LIGHT THEME COLORS - STANDARD CONTRAST
// These colors define the light theme with standard contrast levels following Material Design 3

val primaryLight = Color(0xFF5A631E) // Main brand color - dark green
val onPrimaryLight = Color(0xFFFFFFFF) // Text color on primary surfaces - white
val primaryContainerLight = Color(0xFFDFE995) // Background for primary containers - light green
val onPrimaryContainerLight = Color(0xFF434B06) // Text color on primary containers - dark green
val secondaryLight = Color(0xFF596420) // Secondary brand color - slightly different green
val onSecondaryLight = Color(0xFFFFFFFF) // Text color on secondary surfaces - white
val secondaryContainerLight = Color(0xFFDCEA97) // Background for secondary containers - light green
val onSecondaryContainerLight = Color(0xFF414B08) // Text color on secondary containers - dark green
val tertiaryLight = Color(0xFF5A631F) // Tertiary accent color - green
val onTertiaryLight = Color(0xFFFFFFFF) // Text color on tertiary surfaces - white
val tertiaryContainerLight = Color(0xFFDEEA96) // Background for tertiary containers - light green
val onTertiaryContainerLight = Color(0xFF424B06) // Text color on tertiary containers - dark green
val errorLight = Color(0xFFBA1A1A) // Error color - red
val onErrorLight = Color(0xFFFFFFFF) // Text color on error surfaces - white
val errorContainerLight = Color(0xFFFFDAD6) // Background for error containers - light red
val onErrorContainerLight = Color(0xFF93000A) // Text color on error containers - dark red
val backgroundLight = Color(0xFFFCFAED) // Main background color - very light cream
val onBackgroundLight = Color(0xFF1B1C14) // Text color on background - dark
val surfaceLight = Color(0xFFFBFAED) // Surface color for cards and containers - light cream
val onSurfaceLight = Color(0xFF1B1C15) // Text color on surfaces - dark
val surfaceVariantLight = Color(0xFFE4E3D2) // Alternative surface color - light gray
val onSurfaceVariantLight = Color(0xFF47483B) // Text color on surface variants - dark gray
val outlineLight = Color(0xFF77786A) // Border and divider color - medium gray
val outlineVariantLight = Color(0xFFC8C7B7) // Alternative border color - light gray
val scrimLight = Color.Unspecified // Overlay color - unspecified for light theme
val inverseSurfaceLight = Color(0xFF303129) // Inverse surface color - dark
val inverseOnSurfaceLight = Color(0xFFF3F1E4) // Text color on inverse surfaces - light
val inversePrimaryLight = Color(0xFFC2CD7C) // Inverse primary color - light green
val surfaceDimLight = Color(0xFFDCDACE) // Dimmed surface color - muted cream
val surfaceBrightLight = Color(0xFFFBFAED) // Bright surface color - light cream
val surfaceContainerLowestLight = Color(0xFFFFFFFF) // Highest elevation surface - white
val surfaceContainerLowLight = Color(0xFFF6F4E7) // Low elevation surface - very light cream
val surfaceContainerLight = Color(0xFFF0EEE2) // Standard elevation surface - light cream
val surfaceContainerHighLight = Color(0xFFEAE9DC) // High elevation surface - medium cream
val surfaceContainerHighestLight = Color(0xFFE4E3D6) // Highest elevation surface - darker cream

// LIGHT THEME COLORS - MEDIUM CONTRAST
// These colors provide better contrast for accessibility while maintaining the same color scheme

val primaryLightMediumContrast = Color(0xFF333A00) // Darker green for better contrast
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF) // White text on primary
val primaryContainerLightMediumContrast = Color(0xFF69722C) // Darker container background
val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF) // White text on container
val secondaryLightMediumContrast = Color(0xFF313A00) // Darker secondary green
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF) // White text on secondary
val secondaryContainerLightMediumContrast = Color(0xFF67732D) // Darker secondary container
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF) // White text on secondary container
val tertiaryLightMediumContrast = Color(0xFF323A00) // Darker tertiary green
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF) // White text on tertiary
val tertiaryContainerLightMediumContrast = Color(0xFF68722C) // Darker tertiary container
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF) // White text on tertiary container
val errorLightMediumContrast = Color(0xFF740006) // Darker red for better contrast
val onErrorLightMediumContrast = Color(0xFFFFFFFF) // White text on error
val errorContainerLightMediumContrast = Color(0xFFCF2C27) // Darker error container
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF) // White text on error container
val backgroundLightMediumContrast = Color(0xFFFCFAED) // Same background color
val onBackgroundLightMediumContrast = Color(0xFF1B1C14) // Same text color on background
val surfaceLightMediumContrast = Color(0xFFFBFAED) // Same surface color
val onSurfaceLightMediumContrast = Color(0xFF11120B) // Darker text for better contrast
val surfaceVariantLightMediumContrast = Color(0xFFE4E3D2) // Same surface variant
val onSurfaceVariantLightMediumContrast = Color(0xFF36372B) // Darker text on surface variant
val outlineLightMediumContrast = Color(0xFF525347) // Darker outline for better contrast
val outlineVariantLightMediumContrast = Color(0xFF6D6E60) // Darker outline variant
val scrimLightMediumContrast = Color(0xFF000000) // Black overlay
val inverseSurfaceLightMediumContrast = Color(0xFF303129) // Same inverse surface
val inverseOnSurfaceLightMediumContrast = Color(0xFFF3F1E4) // Same inverse text
val inversePrimaryLightMediumContrast = Color(0xFFC2CD7C) // Same inverse primary
val surfaceDimLightMediumContrast = Color(0xFFC8C7BB) // Darker dim surface
val surfaceBrightLightMediumContrast = Color(0xFFFBFAED) // Same bright surface
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF) // Same highest elevation
val surfaceContainerLowLightMediumContrast = Color(0xFFF6F4E7) // Same low elevation
val surfaceContainerLightMediumContrast = Color(0xFFEAE9DC) // Darker standard elevation
val surfaceContainerHighLightMediumContrast = Color(0xFFDFDDD1) // Darker high elevation
val surfaceContainerHighestLightMediumContrast = Color(0xFFD3D2C6) // Darker highest elevation

// LIGHT THEME COLORS - HIGH CONTRAST
// These colors provide maximum contrast for accessibility, ensuring readability for users with visual impairments

val primaryLightHighContrast = Color(0xFF292F00) // Very dark green for maximum contrast
val onPrimaryLightHighContrast = Color(0xFFFFFFFF) // White text on primary
val primaryContainerLightHighContrast = Color(0xFF454E08) // Very dark container
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF) // White text on container
val secondaryLightHighContrast = Color(0xFF282F00) // Very dark secondary green
val onSecondaryLightHighContrast = Color(0xFFFFFFFF) // White text on secondary
val secondaryContainerLightHighContrast = Color(0xFF444E0A) // Very dark secondary container
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF) // White text on secondary container
val tertiaryLightHighContrast = Color(0xFF292F00) // Very dark tertiary green
val onTertiaryLightHighContrast = Color(0xFFFFFFFF) // White text on tertiary
val tertiaryContainerLightHighContrast = Color(0xFF454E09) // Very dark tertiary container
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF) // White text on tertiary container
val errorLightHighContrast = Color(0xFF600004) // Very dark red for maximum contrast
val onErrorLightHighContrast = Color(0xFFFFFFFF) // White text on error
val errorContainerLightHighContrast = Color(0xFF98000A) // Very dark error container
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF) // White text on error container
val backgroundLightHighContrast = Color(0xFFFCFAED) // Same background color
val onBackgroundLightHighContrast = Color(0xFF1B1C14) // Same text color on background
val surfaceLightHighContrast = Color(0xFFFBFAED) // Same surface color
val onSurfaceLightHighContrast = Color(0xFF000000) // Pure black text for maximum contrast
val surfaceVariantLightHighContrast = Color(0xFFE4E3D2) // Same surface variant
val onSurfaceVariantLightHighContrast = Color(0xFF000000) // Pure black text on surface variant
val outlineLightHighContrast = Color(0xFF2C2D22) // Very dark outline for maximum contrast
val outlineVariantLightHighContrast = Color(0xFF494A3E) // Very dark outline variant
val scrimLightHighContrast = Color(0xFF000000) // Black overlay
val inverseSurfaceLightHighContrast = Color(0xFF303129) // Same inverse surface
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF) // Pure white inverse text
val inversePrimaryLightHighContrast = Color(0xFFC2CD7C) // Same inverse primary
val surfaceDimLightHighContrast = Color(0xFFBAB9AD) // Darker dim surface
val surfaceBrightLightHighContrast = Color(0xFFFBFAED) // Same bright surface
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF) // Same highest elevation
val surfaceContainerLowLightHighContrast = Color(0xFFF3F1E4) // Darker low elevation
val surfaceContainerLightHighContrast = Color(0xFFE4E3D6) // Darker standard elevation
val surfaceContainerHighLightHighContrast = Color(0xFFD6D5C9) // Darker high elevation
val surfaceContainerHighestLightHighContrast = Color(0xFFC8C7BB) // Darker highest elevation

// DARK THEME COLORS - STANDARD CONTRAST
// These colors define the dark theme with standard contrast levels for easy-on-the-eyes experience

val primaryDark = Color(0xFFC2CD7C) // Light green primary for dark theme
val onPrimaryDark = Color(0xFF2D3400) // Dark text on primary surfaces
val primaryContainerDark = Color(0xFF434B06) // Dark green container background
val onPrimaryContainerDark = Color(0xFFDFE995) // Light text on primary containers
val secondaryDark = Color(0xFFC0CE7D) // Light green secondary for dark theme
val onSecondaryDark = Color(0xFF2C3400) // Dark text on secondary surfaces
val secondaryContainerDark = Color(0xFF414B08) // Dark green secondary container
val onSecondaryContainerDark = Color(0xFFDCEA97) // Light text on secondary containers
val tertiaryDark = Color(0xFFC2CD7C) // Light green tertiary for dark theme
val onTertiaryDark = Color(0xFF2D3400) // Dark text on tertiary surfaces
val tertiaryContainerDark = Color(0xFF424B06) // Dark green tertiary container
val onTertiaryContainerDark = Color(0xFFDEEA96) // Light text on tertiary containers
val errorDark = Color(0xFFFFB4AB) // Light red error for dark theme
val onErrorDark = Color(0xFF690005) // Dark text on error surfaces
val errorContainerDark = Color(0xFF93000A) // Dark red error container
val onErrorContainerDark = Color(0xFFFFDAD6) // Light text on error containers
val backgroundDark = Color(0xFF13140D) // Very dark background
val onBackgroundDark = Color(0xFFE4E3D6) // Light text on background
val surfaceDark = Color(0xFF13140D) // Dark surface
val onSurfaceDark = Color(0xFFE4E3D6) // Light text on surfaces
val surfaceVariantDark = Color(0xFF47483B) // Dark surface variant
val onSurfaceVariantDark = Color(0xFFC8C7B7) // Light text on surface variants
val outlineDark = Color(0xFF919283) // Light outline for dark theme
val outlineVariantDark = Color(0xFF47483B) // Dark outline variant
val scrimDark = Color.Unspecified // Overlay color - unspecified for dark theme
val inverseSurfaceDark = Color(0xFFE4E3D6) // Light inverse surface
val inverseOnSurfaceDark = Color(0xFF303129) // Dark text on inverse surfaces
val inversePrimaryDark = Color(0xFF5A631E) // Dark inverse primary
val surfaceDimDark = Color(0xFF13140D) // Dark dim surface
val surfaceBrightDark = Color(0xFF393A31) // Bright surface for dark theme
val surfaceContainerLowestDark = Color(0xFF0E0F08) // Lowest elevation surface - very dark
val surfaceContainerLowDark = Color(0xFF1B1C15) // Low elevation surface - dark
val surfaceContainerDark = Color(0xFF1F2018) // Standard elevation surface - medium dark
val surfaceContainerHighDark = Color(0xFF2A2B22) // High elevation surface - lighter dark
val surfaceContainerHighestDark = Color(0xFF35352D) // Highest elevation surface - lightest dark

// DARK THEME COLORS - MEDIUM CONTRAST
// These colors provide better contrast for accessibility in dark theme

val primaryDarkMediumContrast = Color(0xFFD8E390) // Brighter green primary for better contrast
val onPrimaryDarkMediumContrast = Color(0xFF232800) // Darker text on primary
val primaryContainerDarkMediumContrast = Color(0xFF8D974C) // Brighter container background
val onPrimaryContainerDarkMediumContrast = Color(0xFF000000) // Black text on container
val secondaryDarkMediumContrast = Color(0xFFD6E491) // Brighter secondary green
val onSecondaryDarkMediumContrast = Color(0xFF222900) // Darker text on secondary
val secondaryContainerDarkMediumContrast = Color(0xFF8B974D) // Brighter secondary container
val onSecondaryContainerDarkMediumContrast = Color(0xFF000000) // Black text on secondary container
val tertiaryDarkMediumContrast = Color(0xFFD8E390) // Brighter tertiary green
val onTertiaryDarkMediumContrast = Color(0xFF232800) // Darker text on tertiary
val tertiaryContainerDarkMediumContrast = Color(0xFF8C974C) // Brighter tertiary container
val onTertiaryContainerDarkMediumContrast = Color(0xFF000000) // Black text on tertiary container
val errorDarkMediumContrast = Color(0xFFFFD2CC) // Brighter red error
val onErrorDarkMediumContrast = Color(0xFF540003) // Darker text on error
val errorContainerDarkMediumContrast = Color(0xFFFF5449) // Brighter error container
val onErrorContainerDarkMediumContrast = Color(0xFF000000) // Black text on error container
val backgroundDarkMediumContrast = Color(0xFF13140D) // Same background color
val onBackgroundDarkMediumContrast = Color(0xFFE4E3D6) // Same text color on background
val surfaceDarkMediumContrast = Color(0xFF13140D) // Same surface color
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF) // Pure white text for better contrast
val surfaceVariantDarkMediumContrast = Color(0xFF47483B) // Same surface variant
val onSurfaceVariantDarkMediumContrast = Color(0xFFDEDDCC) // Brighter text on surface variant
val outlineDarkMediumContrast = Color(0xFFB3B3A3) // Brighter outline for better contrast
val outlineVariantDarkMediumContrast = Color(0xFF919182) // Brighter outline variant
val scrimDarkMediumContrast = Color(0xFF000000) // Black overlay
val inverseSurfaceDarkMediumContrast = Color(0xFFE4E3D6) // Same inverse surface
val inverseOnSurfaceDarkMediumContrast = Color(0xFF2A2B22) // Darker inverse text
val inversePrimaryDarkMediumContrast = Color(0xFF444C07) // Darker inverse primary
val surfaceDimDarkMediumContrast = Color(0xFF13140D) // Same dim surface
val surfaceBrightDarkMediumContrast = Color(0xFF45453C) // Brighter bright surface
val surfaceContainerLowestDarkMediumContrast = Color(0xFF070803) // Darker lowest elevation
val surfaceContainerLowDarkMediumContrast = Color(0xFF1D1E17) // Brighter low elevation
val surfaceContainerDarkMediumContrast = Color(0xFF282820) // Brighter standard elevation
val surfaceContainerHighDarkMediumContrast = Color(0xFF32332B) // Brighter high elevation
val surfaceContainerHighestDarkMediumContrast = Color(0xFF3E3E35) // Brighter highest elevation

// DARK THEME COLORS - HIGH CONTRAST
// These colors provide maximum contrast for accessibility in dark theme

val primaryDarkHighContrast = Color(0xFFECF7A1) // Very bright green primary for maximum contrast
val onPrimaryDarkHighContrast = Color(0xFF000000) // Black text on primary
val primaryContainerDarkHighContrast = Color(0xFFBFC978) // Bright container background
val onPrimaryContainerDarkHighContrast = Color(0xFF0A0D00) // Very dark text on container
val secondaryDarkHighContrast = Color(0xFFEAF8A3) // Very bright secondary green
val onSecondaryDarkHighContrast = Color(0xFF000000) // Black text on secondary
val secondaryContainerDarkHighContrast = Color(0xFFBCCA7A) // Bright secondary container
val onSecondaryContainerDarkHighContrast = Color(0xFF090D00) // Very dark text on secondary container
val tertiaryDarkHighContrast = Color(0xFFEBF7A2) // Very bright tertiary green
val onTertiaryDarkHighContrast = Color(0xFF000000) // Black text on tertiary
val tertiaryContainerDarkHighContrast = Color(0xFFBEC979) // Bright tertiary container
val onTertiaryContainerDarkHighContrast = Color(0xFF0A0D00) // Very dark text on tertiary container
val errorDarkHighContrast = Color(0xFFFFECE9) // Very bright red error
val onErrorDarkHighContrast = Color(0xFF000000) // Black text on error
val errorContainerDarkHighContrast = Color(0xFFFFAEA4) // Bright error container
val onErrorContainerDarkHighContrast = Color(0xFF220001) // Very dark text on error container
val backgroundDarkHighContrast = Color(0xFF13140D) // Same background color
val onBackgroundDarkHighContrast = Color(0xFFE4E3D6) // Same text color on background
val surfaceDarkHighContrast = Color(0xFF13140D) // Same surface color
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF) // Pure white text for maximum contrast
val surfaceVariantDarkHighContrast = Color(0xFF47483B) // Same surface variant
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF) // Pure white text on surface variant
val outlineDarkHighContrast = Color(0xFFF2F1E0) // Very bright outline for maximum contrast
val outlineVariantDarkHighContrast = Color(0xFFC4C4B3) // Bright outline variant
val scrimDarkHighContrast = Color(0xFF000000) // Black overlay
val inverseSurfaceDarkHighContrast = Color(0xFFE4E3D6) // Same inverse surface
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000) // Pure black inverse text
val inversePrimaryDarkHighContrast = Color(0xFF444C07) // Same inverse primary
val surfaceDimDarkHighContrast = Color(0xFF13140D) // Same dim surface
val surfaceBrightDarkHighContrast = Color(0xFF505147) // Brighter bright surface
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000) // Pure black lowest elevation
val surfaceContainerLowDarkHighContrast = Color(0xFF1F2018) // Brighter low elevation
val surfaceContainerDarkHighContrast = Color(0xFF303129) // Brighter standard elevation
val surfaceContainerHighDarkHighContrast = Color(0xFF3B3C33) // Brighter high elevation
val surfaceContainerHighestDarkHighContrast = Color(0xFF47473E) // Brighter highest elevation

// EXTENDED COLORS
// Additional colors that extend beyond the Material Design 3 color system for specific app needs

@Immutable
data class ExtendedColors(
   val white: Color = Color(0xFFFFFFFF), // Pure white - used for backgrounds and text
   val transparent: Color = Color(0x00000000), // Transparent - used for overlays and effects
   val green: Color = Color(0xFF00FF00), // Pure green - used for success states and indicators
   val blue: Color = Color(0xFF0000FF), // Pure blue - used for links and interactive elements
   val black: Color = Color(0xFF000000), // Pure black - used for text and borders
)

// CompositionLocal for providing ExtendedColors throughout the composition tree
// This allows any composable to access these extended colors without explicitly passing them
val LocalColors = staticCompositionLocalOf { ExtendedColors() }

// Extension property on MaterialTheme that provides easy access to ExtendedColors
// Usage: val colors = MaterialTheme.colors
// This property is marked as @Composable and @ReadOnlyComposable for proper Compose integration
val MaterialTheme.colors: ExtendedColors
   @Composable
   @ReadOnlyComposable
   get() = LocalColors.current

 